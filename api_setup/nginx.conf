worker_processes  1;

events {
    worker_connections  1024;
}

http {
    lua_shared_dict api_limit 10m;

    server {
        listen 80;
        server_name localhost;

        location /styles/ {
            # Extract API key from query param ?key=APIKEY
            set $api_key $arg_key;

            if ($api_key = "") {
                return 401 '{"error":"API key required"}';
            }

            access_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeout(1000)

                local ok, err = red:connect("127.0.0.1", 6379)
                if not ok then
                    ngx.status = 500
                    ngx.say('{"error":"Redis connection failed"}')
                    return ngx.exit(500)
                end

                local res, err = red:get("api_key:" .. ngx.var.api_key)
                if res == ngx.null then
                    ngx.status = 403
                    ngx.say('{"error":"Invalid API key"}')
                    return ngx.exit(403)
                     end

                -- Increment usage
                red:incr("usage:" .. ngx.var.api_key)
            }

            # Forward request to TileServer
            proxy_pass http://127.0.0.1:8080;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}